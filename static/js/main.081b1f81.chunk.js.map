{"version":3,"sources":["components/TodoContext.js","components/TodoCreate.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","serviceWorker.js","index.js"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","CircleButton","styled","button","props","open","css","InsertFormPositioner","div","InsertForm","form","Input","input","React","memo","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","onClick","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","CheckCircle","Text","TodoItemBlock","TodoItem","TodoListBlock","TodoList","todos","key","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.081b1f81.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext, useRef } from \"react\";\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: \"오늘의 할 일을 입력하세요\",\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"7시 30분 기상\",\r\n    done: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"청소하기\",\r\n    done: false,\r\n  },\r\n];\r\n/*\r\nCREATE\r\nTOGGLE\r\nREMOVE\r\n*/\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE\":\r\n      return state.concat(action.todo);\r\n\r\n    case \"TOGGLE\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      ); //done 반전\r\n\r\n    case \"REMOVE\":\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(4);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\n/*hook */\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { useTodoDispatch, useTodoNextId } from \"./TodoContext\";\r\n\r\nconst CircleButton = styled.button`\r\n  background: #f06595;\r\n  &:hover {\r\n    background: #f783ac;\r\n  }\r\n  &:active {\r\n    background: #e64980;\r\n  }\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%); /*버튼 중앙정렬시켜줌*/\r\n\r\n  font-size: 60px;\r\n  color: white;\r\n  border-radius: 40px;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  transition: 0.125s all ease-in;\r\n\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #9775fa;\r\n      &:hover {\r\n        background: #b197fc;\r\n      }\r\n      &:active {\r\n        background: #845ef7;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding: 32px;\r\n  padding-bottom: 72px;\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n  /*padding을 했을 때 오른쪽으로 삐져나옴 방지해줌*/\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const onToggle = () => setOpen(!open);\r\n  const onChange = (e) => setValue(e.target.value);\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"CREATE\",\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value,\r\n        done: false,\r\n      },\r\n    });\r\n    setValue(\"\");\r\n    setOpen(false); //버튼 닫기\r\n    nextId.current += 1;\r\n  };\r\n\r\n  // useTodoNextId.current += 1;\r\n\r\n  return (\r\n    <>\r\n      {/* 버튼 눌렀을 때 나타나는 text*/}\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input\r\n              placeholder=\"할 일을 입력 후, Enter를 누르세요\"\r\n              autoFocus\r\n              onChange={onChange}\r\n              value={value}\r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n//불필요한 렌더링\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from \"./TodoContext\";\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n\r\n  .tasks-left {\r\n    color: #e64980;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nfunction TodoHead() {\r\n  const todos = useTodoState();\r\n  const undoneTasks = todos.filter((todo) => !todo.done);\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n  const dayName = today.toLocaleDateString(\"ko-KR\", {\r\n    weekday: \"long\",\r\n  });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayName}</div>\r\n      <div className=\"tasks-left\">할일 {undoneTasks.length}개 남음</div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdDone, MdDelete } from \"react-icons/md\";\r\nimport { useTodoDispatch } from \"./TodoContext\";\r\n\r\n//쓰레기통아이콘\r\nconst Remove = styled.div`\r\n  opacity: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #9775fa;\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #e64980;\r\n      color: #e64980;\r\n    `}\r\n`; //done이 있으면 테두리와 폰트 색 수정.\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n`;\r\n\r\n//todoitem block에 마우스를 올렸을 때 Remove가 동작하도록 할 수 있다.\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-itmes: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n\r\n  &:hover {\r\n    ${Remove} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\nfunction TodoItem({ id, done, text }) {\r\n  const dispatch = useTodoDispatch();\r\n  const onToggle = () =>\r\n    dispatch({\r\n      type: \"TOGGLE\",\r\n      id,\r\n    });\r\n  const onRemove = () =>\r\n    dispatch({\r\n      type: \"REMOVE\",\r\n      id,\r\n    });\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={onToggle}>\r\n        {done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemove}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from \"./TodoContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n//flex 1은 자신이 차지할 모든 영역을 차지하게 함\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\nfunction TodoList() {\r\n  const todos = useTodoState();\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map((todo) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          id={todo.id}\r\n          text={todo.text}\r\n          done={todo.done}\r\n        />\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  position:relative;\r\n  background:white;\r\n  border-radius:16px;\r\n  box-shadow:0 0 8px rgba(0,0,0,0.04)\r\n\r\n  margin:0 auto;\r\n  margin:96px auto 48px;\r\n\r\n  display:flex;\r\n  flex-direction:column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport TodoCreate from \"./components/TodoCreate\";\nimport TodoHead from \"./components/TodoHead\";\nimport TodoList from \"./components/TodoList\";\nimport TodoTemplate from \"./components/TodoTemplate\";\nimport { TodoProvider } from \"./components/TodoContext\";\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background:#e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}